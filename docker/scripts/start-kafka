#!/usr/bin/env bash
#

USER=${ZOOKEEPER_DATAPROXY_USER:-`whoami`}
HOST=${ZOOKEEPER_DATAPROXY_HOST:-`hostname -s`}
#DOMAIN=${ZOOKEEPER_DATAPROXY_DOMAIN:-`hostname -d`}



if [[ $HOST =~ (.*)-([0-9]+)$ ]]; then
    NAME=${BASH_REMATCH[1]}
    ORD=${BASH_REMATCH[2]}
else
    echo "Failed to parse name and ordinal of Pod"
    exit 1
fi






echo '###############################################'
echo '######## initial printenv ######'
echo '###############################################'
printenv
echo '###############################################'
echo '######## EOF initial printenv ######'
echo '###############################################'

unset KAFKA_PORT

echo "HOSTNAME: ${HOSTNAME} ${HOSTNAME##*-} "  
echo "Exporting Variables TODO: change to a new image layer rather "  
export KAFKA_BROKER_ID=${HOSTNAME##*-} 
export KAFKA_LOG4J_ROOT_LOGLEVEL=${KAFKA_LOG4J_ROOT_LOGLEVEL:-DEBUG} 
export KAFKA_TOOLS_LOG4J_LOGLEVEL=${KAFKA_TOOLS_LOG4J_LOGLEVEL:-DEBUG} 
export WELCOME_MESSAGE=${WELCOME_MESSAGE:-"Generic welcome from starting command"} 
export KAFKA_SSL_TRUSTSTORE_PASSWORD 
export KAFKA_SSL_TRUSTSTORE_LOCATION=${KAFKA_SSL_TRUSTSTORE_LOCATION:-/mnt/truststore.jks} 
export KAFKA_ADVERTISED_LISTENERS=${KAFKA_ADVERTISED_LISTENERS:-"INTERNET://${HOST_IP}:$((KAFKA_BROKER_ID+31090)),INTRANET://${POD_NAME}.kafka.${POD_NAMESPACE}:9092"} 
export KAFKA_SSL_KEY_PASSWORD 
export KAFKA_SSL_KEYSTORE_LOCATION=${KAFKA_SSL_KEYSTORE_LOCATION:-"/mnt/keystore.jks"} 
export KAFKA_SSL_KEYSTORE_PASSWORD 
export KAFKA_INTER_BROKER_LISTENER_NAME=${KAFKA_INTER_BROKER_LISTENER_NAME:-"INTRANET"} 
export KAFKA_ZOOKEEPER_CONNECT=${KAFKA_ZOOKEEPER_CONNECT:-"zk-hs.default.svc.cluster.local:2182"}  
export KAFKA_LISTENERS=${KAFKA_LISTENERS:-"INTERNET://:9092,INTRANET://:9093"} 
export KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP:-"INTERNET:SSL,INTRANET:SSL"} 
export POD_IP  
export HOST_IP  
export POD_NAME  
export POD_NAMESPACE 
echo '###############################################'
echo '######## final printenv ######'
echo '###############################################'
printenv 
echo '###############################################'
echo '######## EOF final printenv ######'
echo '###############################################'
exec /etc/confluent/docker/run 